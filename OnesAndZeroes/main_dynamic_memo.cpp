#include <iostream>
#include <vector>
#include <string>
#include <cassert>
#include <unordered_map>
#include <sstream>
#include <ctime>

using namespace std;

static const auto _____ = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    return nullptr;
}();


class Solution {
private:
    unordered_map<string, vector<int>> countMap;

    vector<int> getZeroOneCount(string s) {
        if (countMap.count(s)) {
            return countMap[s];
        }

        int oneCount = 0, zeroCount = 0;
        for (int j = 0; j < s.size(); ++j) {
            int num = s[j] - '0';
            if (num == 1)
                oneCount++;
            else
                zeroCount++;
        }
        vector<int> result;
        result.push_back(zeroCount);
        result.push_back(oneCount);
        countMap[s] = result;

        return countMap[s];
    }

public:


    int findMaxForm(vector<string> &strs, int m, int n) {

        if ((m == 0 && n == 0))
            return 0;

        vector<vector<int>> memo(m + 1, vector<int>(n + 1, 0));

        for (int k = 0; k < strs.size(); ++k) {
            vector<int> counts = getZeroOneCount(strs[k]);
            int zeroCount = counts[0];
            int oneCount = counts[1];
            // m, n 的每一个可能的组合
            for (int i = m; i >= zeroCount; i--) {
                for (int j = n; j >= oneCount; j--) {
                    memo[i][j] = max(1 + memo[i - zeroCount][j - oneCount], memo[i][j]);
                }
            }
        }

        return memo[m][n];

    }

};


int main() {
    vector<string> strs = {"1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
                           "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101",
                           "0101", "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101"};

    Solution s;
    clock_t startTime = clock();
    cout << s.findMaxForm(strs, 100, 100) << endl;
    clock_t endTime = clock();
    cout << "cost time: " << double(endTime - startTime) / CLOCKS_PER_SEC;
    return 0;
}
